#include <stdio.h>
#include <string.h>
#include <ctype.h>

#define ALPHABET_SIZE 26
#define MAX_TEXT_SIZE 1000
    8.167, 1.492, 2.782, 4.253, 12.702, 2.228, 2.015, 6.094, 6.966, 0.153,
    0.772, 4.025, 2.406, 6.749, 7.507, 1.929, 0.095, 5.987, 6.327, 9.056,
    2.758, 0.978, 2.360, 0.150, 1.974, 0.074
};

// Function to decrypt the text with a given key
void decryptWithKey(char *ciphertext, char *plaintext, int key) {
    int len = strlen(ciphertext);
    for (int i = 0; i < len; i++) {
        if (isalpha(ciphertext[i])) {
            plaintext[i] = ((ciphertext[i] - 'a' - key + ALPHABET_SIZE) % ALPHABET_SIZE) + 'a';
        } else {
            plaintext[i] = ciphertext[i];
        }
    }
    plaintext[len] = '\0';
}

double chiSquaredStatistic(char *text) {
    int letterCounts[ALPHABET_SIZE] = {0};
    int len = strlen(text);
    int totalLetters = 0;

    for (int i = 0; i < len; i++) {
        if (isalpha(text[i])) {
            letterCounts[text[i] - 'a']++;
            totalLetters++;
        }
    }

    double chiSquared = 0.0;
    for (int i = 0; i < ALPHABET_SIZE; i++) {
        double expectedCount = totalLetters * (englishLetterFreq[i] / 100.0);
        double observedCount = letterCounts[i];
        chiSquared += ((observedCount - expectedCount) * (observedCount - expectedCount)) / expectedCount;
    }

    return chiSquared;
}

void letterFrequencyAttack(char *ciphertext, int topN) {
    char plaintext[MAX_TEXT_SIZE];
    double chiSquaredValues[ALPHABET_SIZE];
    int keys[ALPHABET_SIZE];

    for (int key = 0; key < ALPHABET_SIZE; key++) {
        decryptWithKey(ciphertext, plaintext, key);
        chiSquaredValues[key] = chiSquaredStatistic(plaintext);
        keys[key] = key;
    }

  
    for (int i = 0; i < ALPHABET_SIZE - 1; i++) {
        for (int j = i + 1; j < ALPHABET_SIZE; j++) {
            if (chiSquaredValues[i] > chiSquaredValues[j]) {
                double tempValue = chiSquaredValues[i];
                chiSquaredValues[i] = chiSquaredValues[j];
                chiSquaredValues[j] = tempValue;

                int tempKey = keys[i];
                keys[i] = keys[j];
                keys[j] = tempKey;
            }
        }
    }

    printf("Top %d possible plaintexts:\n", topN);
    for (int i = 0; i < topN && i < ALPHABET_SIZE; i++) {
        decryptWithKey(ciphertext, plaintext, keys[i]);
        printf("Key %d: %s (Chi-Squared: %.2f)\n", keys[i], plaintext, chiSquaredValues[i]);
    }
}

int main() {
    char ciphertext[MAX_TEXT_SIZE];
    int topN = 10;

    printf("Enter the ciphertext: ");
    scanf("%s", ciphertext);

    letterFrequencyAttack(ciphertext, topN);

    return 0;
}
